#!/usr/bin/octave-cli --no-window-system
% function srf2tri(srffile,trifile,radius)
% Convert an ASCII surface file (.srf) to a triangle file (.tri).
%
% Usage:
% srf2tri(srffile,trifile,radius)
%
% srffile : Surface file.
% trifile : Triangle file.
% radius  : New radius (default is the 
%           same as input surface).
%
% _____________________________________
% Anderson M. Winkler
% FMRIB / University of Oxford
% Jul/2014
% http:/brainder.org

% Do OCTAVE stuff
if exist('argv','builtin') && ~ exist('varargin','var')
    
    % Get the inputs
    varargin = argv();
    nargin   = numel(varargin);
    
    % Disable memory dump on SIGTERM
    sigterm_dumps_octave_core(0);
    
    % Print usage if no inputs are given
    if isempty(varargin) || strcmp(varargin{1},'-q'),
        fprintf('Convert an ASCII surface file (.srf) to a triangle file (.tri).\n');
        fprintf('\n');
        fprintf('Usage:\n');
        fprintf('srf2tri <srffile> <trifile>\n');
        fprintf('\n');
        fprintf('srffile : Surface file.\n');
        fprintf('trifile : Triangle file.\n');
        fprintf('radius  : New radius (default is the\n');
        fprintf('          same as input surface).\n');
        fprintf('\n');
        fprintf('_____________________________________\n');
        fprintf('Anderson M. Winkler\n');
        fprintf('FMRIB / University of Oxford\n');
        fprintf('Jul/2014\n');
        fprintf('http:/brainder.org\n');
        return;
    end
    
    % For when calling from the shell
    srffile = varargin{1};
    trifile = varargin{2};
    radius = NaN;
    if nargin == 3,
        if ischar(varargin{3}),
            radius = str2double(varargin{3});
        else
            radius = varargin{3};
        end
    end
end

% Load the input surface
[vtx,fac] = srfread(srffile);
nV = size(vtx,1);
nF = size(fac,1);

% Compute the current radius and make sure
% the .tri will have radius 1e5 (this may not be
% necessary for SD, but just in case...).
if ~isnan(radius),
    r   = mean(sqrt(sum(vtx.^2,2)));
    cte = radius./r;
    vtx = vtx.*cte;
end

% Save the .tri file
fid = fopen(trifile,'w');
fprintf(fid,'%d 0 0 0\n',nV);
fprintf(fid,'%d %0.18f %0.18f %0.18f\n',vertcat((1:nV),vtx'));
fprintf(fid,'%d 0 0 0\n',nF);
fprintf(fid,'%d %d %d %d\n',vertcat((1:nF),fac'));
fclose(fid);
